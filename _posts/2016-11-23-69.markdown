---
layout: post
title:  "Problem 55 Lychrel numbers"
date:   2016-11-23 12:52:00 +0800
categories: 技术
tags: python projecteulor
use_code: true
use_math: true
---
If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.

Not all numbers produce palindromes so quickly. For example,

349 + 943 = 1292,
1292 + 2921 = 4213
4213 + 3124 = 7337

That is, 349 took three iterations to arrive at a palindrome.

Although no one has proved it yet, it is thought that some numbers, like 196, never produce a palindrome. A number that never forms a palindrome through the reverse and add process is called a Lychrel number. Due to the theoretical nature of these numbers, and for the purpose of this problem, we shall assume that a number is Lychrel until proven otherwise. In addition you are given that for every number below ten-thousand, it will either (i) become a palindrome in less than fifty iterations, or, (ii) no one, with all the computing power that exists, has managed so far to map it to a palindrome. In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome: 4668731596684224866951378664 (53 iterations, 28-digits).

Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994.

How many Lychrel numbers are there below ten-thousand?

NOTE: Wording was modified slightly on 24 April 2007 to emphasise the theoretical nature of Lychrel numbers.

<!--more-->
    def palindromes(number_str):
        result = True
        for i in range(0, len(number_str) / 2):
            if not number_str[i] == number_str[len(number_str) - 1 - i]:
                result = False
                break
        return result


    def rev(number):
        result = 0
        while number >= 10:
            result += number % 10
            result *= 10
            number /= 10
        result += number
        return result


    def process(number, level):
        result = number + rev(number)
        while not palindromes(str(result)):
            result += rev(result)
            level += 1
            if level > 49:
                return result, False
        return result, level

    count = 0
    for i in range(1, 10001):
        result, status = process(i, 1)
        # print i, process(i, 1)
        if status is False:
            count += 1

    print count

while number >= 10:原来写成 while number > 10: 结果怎么都算不对
发现自己python debug还是很薄弱，还是面向print编程。。
